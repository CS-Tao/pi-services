version: '3.5'

services:
  # cron-backup
  # cron-backup:
  #   image: cstao/cron-backup:v1.0.0
  #   container_name: cron-backup
  #   restart: unless-stopped
  #   volumes:
  #     - ./backup/backups/:/root/backups/
  #     - ./backup/sync/:/root/sync/
  #     - ./backup/log/:/var/log/
  #   environment:
  #     HOST: ${CRON_BACKUP_HOST}
  #     SSH_PORT: ${CRON_BACKUP_SSH_PORT}
  #     SSH_USER: ${CRON_BACKUP_SSH_USER}
  #     SSH_PASSWD: ${CRON_BACKUP_SSH_PASSWD}
  #     SYNC_FILES: ${CRON_BACKUP_SYNC_FILES}
  #     SYNC_FOLDERS: ${CRON_BACKUP_SYNC_FOLDERS}
  #     MAX_BACKUPS: 7
  #     INIT_BACKUP: 1
  #     INIT_BACKUP_TIMEOUT: 0
  #     CRON_TIME: '0 4 * * *'

  # hass
  hass:
    image: homeassistant/home-assistant
    container_name: home-assistant
    volumes:
      - ./hass/config/:/config/
      - /etc/localtime:/etc/localtime:ro
    # network_mode: host
    networks:
      - hass-network

  # portainer
  portainer:
    image: portainer/portainer
    container_name: portainer
    command: --admin-password '${PORTAINER_ADMIN_PASSWD_HASHED}'
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-v:/data
    networks:
      - portainer-network

  # owncloud (3 service)
  owncloud:
    image: owncloud/server:latest
    container_name: owncloud
    restart: always
    depends_on:
      - owncloud-db
      - owncloud-redis
    environment:
      - OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN}
      - OWNCLOUD_DB_TYPE=mysql
      - OWNCLOUD_DB_NAME=owncloud
      - OWNCLOUD_DB_USERNAME=${OWNCLOUD_DB_USERNAME}
      - OWNCLOUD_DB_PASSWORD=${OWNCLOUD_DB_PASSWORD}
      - OWNCLOUD_DB_HOST=owncloud-db
      - OWNCLOUD_ADMIN_USERNAME=${OWNCLOUD_ADMIN_USERNAME}
      - OWNCLOUD_ADMIN_PASSWORD=${OWNCLOUD_ADMIN_PASSWORD}
      - OWNCLOUD_MYSQL_UTF8MB4=true
      - OWNCLOUD_REDIS_ENABLED=true
      - OWNCLOUD_REDIS_HOST=owncloud-redis
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - owncloud-files-v:/mnt/data
    networks:
      - owncloud-network
  owncloud-db:
    image: webhippie/mariadb:latest
    container_name: owncloud-db
    restart: always
    environment:
      - MARIADB_ROOT_PASSWORD=${OWNCLOUD_DB_ROOT_PASSWORD}
      - MARIADB_USERNAME=${OWNCLOUD_DB_USERNAME}
      - MARIADB_PASSWORD=${OWNCLOUD_DB_PASSWORD}
      - MARIADB_DATABASE=owncloud
      - MARIADB_MAX_ALLOWED_PACKET=128M
      - MARIADB_INNODB_LOG_FILE_SIZE=64M
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - owncloud-db-v:/var/lib/mysql
      - ./owncloud/backup/:/var/lib/backup
    networks:
      - owncloud-network
  owncloud-redis:
    image: webhippie/redis:latest
    container_name: owncloud-redis
    restart: always
    environment:
      - REDIS_DATABASES=1
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - owncloud-redis-v:/var/lib/redis
    networks:
      - owncloud-network

  # caddy
  caddy:
    image: orbsmiv/caddy-rpi
    container_name: caddy
    environment:
      ACME_AGREE: "true"
      DOMAIN_FILES: ${CADDY_DOMAIN_FILES}
      DOMAIN_HASS: ${CADDY_DOMAIN_HASS}
      DOMAIN_PORTAINER: ${CADDY_DOMAIN_PORTAINER}
      DOMAIN_OWNCLOUD: ${CADDY_DOMAIN_OWNCLOUD}
    restart: unless-stopped
    ports:
      - ${CADDY_PORT}:2015
    volumes:
      - ./caddy/Caddyfile:/etc/Caddyfile:ro
      - ./caddy/caddyfile.d/:/etc/caddyfile.d/:ro
      - ./caddy/www/:/srv/:ro
      - ./caddy/logs/:/var/logs/
    depends_on:
      - hass
      - portainer
      - owncloud
    networks:
      - hass-network
      - portainer-network
      - owncloud-network

volumes:
  portainer-v:
    name: portainer-data
  owncloud-files-v:
    name: owncloud-files
  owncloud-db-v:
    name: owncloud-db
  owncloud-redis-v:
    name: owncloud-redis

networks:
  default:
    name: pi-services-network
  portainer-network:
    name: portainer-network
  hass-network:
    name: hass-network
  owncloud-network:
    name: owncloud-network
